const Display = (props) => {
    return (<div id="display">{props.displayText}</div>);
};

const Button = (props) => {
    return (
        <button id={props.id} 
        onClick={(e) => props.handleClick(props.repr, e)}>
        {props.repr}
        </button>);
};

class Calculator extends React.Component {
  constructor(props) {
    super(props);
    
    this.state = { 
        displayText: '',
        pendingOperation: null,
        storedNum: null
    };
    
    this.handleNumClick = this.handleNumClick.bind(this);
    this.clearCalc = this.clearCalc.bind(this);
    this.totalUp = this.totalUp.bind(this);
    this.calculate = this.calculate.bind(this);

  }
  
  clearCalc(){
    this.setState(
    {
        displayText: '0',
        storedNum: null,
        pendingOperation:  null
    }
    );
  }
  
  totalUp() {
    if (!!this.state.pendingOperation && !isNaN(Number(this.state.displayText) && this.state.storedNum)) {
      let result = this.state.pendingOperation ? this.state.pendingOperation(Number(this.state.displayText)) : this.state.storedNum; //will fail if display text not a number..

      this.setState({
        displayText: result,
        storedNum: result,
        pendingOperation: null
        });
    }
  }

  calculate(operationType){ 
   
    
    
    const rsltIsNaN = isNaN(Number(this.state.displayText));
    if (rsltIsNaN) {
      this.setState({
        pendingOperation: null
      });
    }
    else {
      if (!isNaN(Number(this.state.displayText)) && !!this.state.pendingOperation){
      this.setState({storedNum: this.state.pendingOperation ? this.state.pendingOperation(Number(this.state.displayText)) : this.state.storedNum})
    }
      else{
        this.setState({ storedNum: Number(this.state.displayText)});
      }
    }
      
    switch (operationType) {
        case 'multiply':
            this.setState({
                pendingOperation: ((newNum) => {return this.state.storedNum * newNum}), 
                displayText: '×'
            });
            break;
        case 'divide':
            this.setState({
                pendingOperation: ((newNum) => {return this.state.storedNum / newNum}), 
                displayText: '÷'
            });
            break;
        case 'add':
            this.setState({
                pendingOperation: ((newNum) => {return this.state.storedNum + newNum}), 
                displayText: '+'
            });
            break;
        case 'subtract':
            this.setState({
                pendingOperation: ((newNum) => {return this.state.storedNum - newNum}), 
                displayText: '−'
            });
            break;
      }

  }

  
  handleNumClick(repr, e){ /*bugged */
      if (isNaN(this.state.displayText)) {
        this.setState({displayText: repr});
      } //catch NaNs
      else {
        let newRepr = repr;
        if (this.state.displayText.includes('.') && newRepr == '.') {
            newRepr = ''; //prevent multiple decimal points
        }
        let newNum = (this.state.displayText + newRepr).replace(/^(0+)((?=\d))/, '$2'); //remove leading zeros
        if (null) {
        this.setState({
            storedNum: this.state.pendingOperation ? this.state.pendingOperation(Number(this.state.displayText)) : this.state.storedNum, //TODO
            pendingOperation: null,
            displayText: newNum})
        }
        else {
          this.setState({
            displayText: newNum
          });
        }
      }
  }
 
  render(){ 
  
    const operationButtons = [   
        {id: 'equals', repr: '=', operation: this.totalUp},
        {id: 'subtract', repr: '−', operation: (() => {this.calculate('subtract')})},
        {id: 'add', repr: '+', operation: (() => {this.calculate('add')})},
        {id: 'multiply', repr: '×', operation: (() => {this.calculate('multiply')})},
        {id: 'divide', repr: '÷', operation: (() => {this.calculate('divide')})},
        {id: 'clear', repr: 'C', operation: this.clearCalc}];
    
    const numberButtons = [
        {id: 'decimal', repr: '.'},
        {id: 'zero', repr: '0'},
        {id: 'one', repr: '1'},
        {id: 'two', repr: '2'},
        {id: 'three', repr: '3'},
        {id: 'four', repr: '4'},
        {id: 'five', repr: '5'},
        {id: 'six', repr: '6'},
        {id: 'seven', repr: '7'},
        {id: 'eight', repr: '8'},
        {id: 'nine', repr: '9'}
     ];

    return (
    <div>
        <div id="debug-panel">
      {Object.keys(this.state).map(x => <p>{x + ": " + this.state[x] + "\n"}</p>)}
         
        </div>
    <div id="calculator">
        <Display displayText={this.state.displayText} />

        {numberButtons.map(button => {return (<Button id={button.id} repr={button.repr} handleClick={this.handleNumClick} />)})}
    
        {operationButtons.map(button => {return (<Button id={button.id} repr={button.repr} handleClick={button.operation} />)})}
    </div>
      
      </div>);
  }
}

ReactDOM.render(<Calculator />, document.getElementById('root'));