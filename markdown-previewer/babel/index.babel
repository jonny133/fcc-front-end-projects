const initialMD = 
`# Markdown heading

## This is a sub-heading.
### and a sub-sub-heading
  
Text styles: **bold** and _italic_.
which can be  **_combined!_**
and strikeout is ~~sorta~~ cool.

Here is a [link](https://www.freecodecamp.com), and
> a block quote.

Inline code looks like: \`<div></div>\`, input between 2 backticks.

\`\`\`
// multi-line code:

function exampleFunction(a, b) {
  return (a**2 + b);
}
\`\`\`
  

Other fun things include tables:

header 1 | header 2 | header 3
------------ | ------------- | ------------- 
1 | 2 | 3
I | II | III

- Unordered lists
  - bulleted
     - with different indentation levels
        - and one more.


1. Numbered lists are easy
1. List continues even using '1'
2. etc. etc.
- dashes or asterisks too
* Here is an embedded image for fun

![Doggy](https://bit.ly/2KyZYun)

inline html: 

<small>some small text</small>
`;

marked.setOptions({
  gfm: true,
  breaks: true,
});

const renderer = new marked.Renderer();
renderer.link = function (href, title, text) {
  return `<a target="_blank" href="${href}">${text}` + '</a>';
}

class App extends React.Component {
 constructor(props) {
  super(props);
  this.state = {
   content: initialMD,
  };
  this.handleChange = this.handleChange.bind(this);
 }
 
 handleChange(event){
  this.setState({
   content: event.target.value,
  });
 }
 
 render() {
  return (
   <div id="overall">
   <div id="header">
   <h1>Markdown Previewer</h1>
    <small><em>Using React and marked.js</em></small>
    </div>
   <div class="container">
   <div id="editor-pane">
   <Editor onChange={this.handleChange} content={this.state.content}/>
   </div>
  
   <div id="preview-pane">
   <Viewer content={this.state.content}/>
   </div>
   
  </div>
     </div>);
 }
}

const Editor = (props) => {
 return (
  <textarea id="editor" value={props.content} onChange={props.onChange} type="text"/>
 );
}

const Viewer = (props) => {
 return (
  <div id="preview" dangerouslySetInnerHTML={{__html: marked(props.content, { renderer: renderer })}}></div>
 );
}

ReactDOM.render(<App />, document.getElementById('app'));